I"˜G<h1 id="introduction-to-the-shell">Introduction to the Shell</h1>

<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#introduction-to-the-shell" id="markdown-toc-introduction-to-the-shell">Introduction to the Shell</a>    <ol>
      <li><a href="#what-is-the-shell" id="markdown-toc-what-is-the-shell">What is the shell?</a></li>
      <li><a href="#navigating-in-the-shell" id="markdown-toc-navigating-in-the-shell">Navigating in the shell</a>        <ol>
          <li><a href="#the-prompt" id="markdown-toc-the-prompt">The Prompt</a></li>
          <li><a href="#the-file-system" id="markdown-toc-the-file-system">The File System</a></li>
          <li><a href="#moving-around-in-the-file-system" id="markdown-toc-moving-around-in-the-file-system">Moving around in the File System</a></li>
        </ol>
      </li>
      <li><a href="#working-with-files-and-directories" id="markdown-toc-working-with-files-and-directories">Working with files and directories</a>        <ol>
          <li><a href="#moving-into-and-creating-new-directories" id="markdown-toc-moving-into-and-creating-new-directories">Moving into and creating new directories</a></li>
          <li><a href="#exploring-files" id="markdown-toc-exploring-files">Exploring files</a></li>
          <li><a href="#wildcards" id="markdown-toc-wildcards">Wildcards</a></li>
          <li><a href="#redirect-and-append" id="markdown-toc-redirect-and-append">Redirect and Append</a></li>
          <li><a href="#copy-move-and-delete" id="markdown-toc-copy-move-and-delete">Copy, Move, and Delete</a></li>
        </ol>
      </li>
      <li><a href="#loops-and-scripts" id="markdown-toc-loops-and-scripts">Loops and Scripts</a>        <ol>
          <li><a href="#create-a-script-file" id="markdown-toc-create-a-script-file">Create a script file</a></li>
          <li><a href="#write-a-script" id="markdown-toc-write-a-script">Write a script</a></li>
          <li><a href="#write-a-loop" id="markdown-toc-write-a-loop">Write a loop</a></li>
          <li><a href="#save-and-run-the-script" id="markdown-toc-save-and-run-the-script">Save and run the script</a></li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

</details>

<h2 id="what-is-the-shell">What is the shell?</h2>

<ul>
  <li>A program that allows you to interact with your computer using typed text commands</li>
  <li>Commands respond by generating output</li>
  <li>Output can come to the screen, or can be directed to a file or other commands</li>
  <li>Chaining commands together makes it possible to automate a series of actions</li>
</ul>

<p>This session introduces:</p>
<ul>
  <li>Basic commands to interact with the file system</li>
  <li>Manipulating files and their contents</li>
  <li>Working with many files at once</li>
</ul>

<hr />

<h2 id="navigating-in-the-shell">Navigating in the shell</h2>

<h3 id="the-prompt">The Prompt</h3>

<p>We type commands at the shell‚Äôs prompt, which looks like <code class="language-plaintext highlighter-rouge">$</code>. Sometimes the prompt includes additional information.</p>

<h3 id="the-file-system">The File System</h3>

<p>The file system is the part of the operating system that manages files and directories (folders):</p>
<ul>
  <li>Files: hold information</li>
  <li>Directories: hold files, other directories, or both</li>
</ul>

<p>The file system is hierarchical, so think about smaller containers nested inside bigger containers.</p>

<h3 id="moving-around-in-the-file-system">Moving around in the File System</h3>

<p>Three key commands answer some important questions:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">pwd</code> stands for ‚Äúprint working directory‚Äù and means ‚ÄúWhere am I?‚Äù</li>
  <li><code class="language-plaintext highlighter-rouge">ls</code> stands for ‚Äúlist‚Äù and means ‚ÄúWhat is here with me?‚Äù</li>
  <li><code class="language-plaintext highlighter-rouge">cd</code> stands for ‚Äúchange directory‚Äù and means ‚ÄúGet me out of here!‚Äù</li>
</ul>

<p>Commands often take additional information, called arguments, to make their actions more specific.</p>

<p><code class="language-plaintext highlighter-rouge">ls</code> takes many possible arguments to change how the contents of a directory are displayed. Common <code class="language-plaintext highlighter-rouge">ls</code> arguments are:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ls -l</code>: ‚Äúlist long‚Äù to show more information about the contents of a directory</li>
  <li><code class="language-plaintext highlighter-rouge">ls -lh</code>: ‚Äúlist long human‚Äù to include human-readable file size information</li>
</ul>

<p>We can find out more about any command by invoking the manual for that command:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">man ls</code> is a good way to find out what arguments <code class="language-plaintext highlighter-rouge">ls</code> can take</li>
</ul>

<p>To move to a different directory, we tell the <code class="language-plaintext highlighter-rouge">cd</code> command where we want to go within the current working directory:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cd shell-lesson</code></li>
</ul>

<p>An important shortcut allows us to move into the parent directory of our current working directory, in effect backing out of our file system:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cd ..</code></li>
</ul>

<hr />

<h2 id="working-with-files-and-directories">Working with files and directories</h2>

<h3 id="moving-into-and-creating-new-directories">Moving into and creating new directories</h3>

<p>We will work with files located in our <code class="language-plaintext highlighter-rouge">shell-lesson</code> directory:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cd shell-lesson</code></li>
</ul>

<p>To make a new directory:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">mkdir firstdir</code></li>
</ul>

<p>When working in the shell, it‚Äôs important to use <strong>no spaces</strong> in file and directory names. The space character tells the shell to look for the next command or input. Spaces in file and directory names will cause you trouble.</p>

<h3 id="exploring-files">Exploring files</h3>

<p>We can use several methods to find out the contents of a file.</p>

<p><code class="language-plaintext highlighter-rouge">cat</code> stands for ‚Äúconcatenate‚Äù and reads the contents of a file out onto the screen:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cat 829-0.txt</code></li>
  <li>For long files such as this one, it‚Äôs too much information at once</li>
</ul>

<p>Instead, we can peek at the first or last 10 lines of a file:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">head 829-0.txt</code> displays the first 10 lines of the file on the screen</li>
  <li><code class="language-plaintext highlighter-rouge">tail 829-0.txt</code> displays the last 10 lines of the file on the screen</li>
</ul>

<p>Or, to see more information in a controlled way, we can put the file into a reader called the <code class="language-plaintext highlighter-rouge">pager</code> using the command <code class="language-plaintext highlighter-rouge">less</code>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">less 829-0.txt</code></li>
</ul>

<p>Inside the <code class="language-plaintext highlighter-rouge">pager</code> we can move page by page:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">spacebar</code> moves forward</li>
  <li><code class="language-plaintext highlighter-rouge">b</code> moves backward</li>
  <li><code class="language-plaintext highlighter-rouge">q</code> to quit the pager</li>
</ul>

<h3 id="wildcards">Wildcards</h3>

<p>The shell has two commonly-used wildcard characters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">*</code> stands for ‚Äúzero or more characters‚Äù</li>
  <li><code class="language-plaintext highlighter-rouge">?</code> stands for ‚Äúone character‚Äù</li>
</ul>

<p>Wildcards help us work with multiple files at once and save typing.</p>

<p>Instead of <code class="language-plaintext highlighter-rouge">head 829-0.txt 33504-0.txt</code> to see the first 10 lines of two files, we can use a wildcard:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">head *.txt</code></li>
</ul>

<h3 id="redirect-and-append">Redirect and Append</h3>

<p>To get only the first line of a file, we can tweak the <code class="language-plaintext highlighter-rouge">head</code> command:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">head -n 1 829-0.txt 33504-0.txt</code></li>
</ul>

<p>Instead of getting these two lines on the screen, we can redirect them to a file using <code class="language-plaintext highlighter-rouge">&gt;</code>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">head -n 1 829-0.txt 33504-0.txt &gt; book-titles.txt</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">&gt;</code> will erase the existing contents of a file. If we need to add information from another file to <code class="language-plaintext highlighter-rouge">book-titles.txt</code> without erasing our work, we can append to the bottom of the file using <code class="language-plaintext highlighter-rouge">&gt;&gt;</code>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">head -n 1 pg514.txt &gt;&gt; book-titles.txt</code></li>
</ul>

<h3 id="copy-move-and-delete">Copy, Move, and Delete</h3>

<p>Let‚Äôs back up our files using the <code class="language-plaintext highlighter-rouge">backup/</code> directory. We make a copy of each file, giving it a clearer file name, then move it into <code class="language-plaintext highlighter-rouge">backup/</code>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cp 829-0.txt gulliver.txt</code></li>
  <li><code class="language-plaintext highlighter-rouge">mv gulliver.txt backup</code></li>
</ul>

<p>We can combine this into one command by telling <code class="language-plaintext highlighter-rouge">cp</code> to put the copied file in the <code class="language-plaintext highlighter-rouge">backup/</code> directory:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cp 33504-0.txt backup/opticks.txt</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">mv</code> and <code class="language-plaintext highlighter-rouge">cp</code> will overwrite any existing file that has the same name as the file being moved or copied. Be careful to avoid data loss.</p>

<p>To clean up our workspace, we can delete files and directories we don‚Äôt need:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">rm book-titles.txt</code> means ‚Äúremove‚Äù the file</li>
  <li><code class="language-plaintext highlighter-rouge">rmdir firstdir</code> means ‚Äúremove a directory‚Äù</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">rm</code> and <code class="language-plaintext highlighter-rouge">rmdir</code> are <strong>permanent and forever</strong> in the shell. There is no recycle bin or trash can to save you. Be careful what and when you delete.</p>

<hr />

<h2 id="loops-and-scripts">Loops and Scripts</h2>

<p>A loop allows us to apply one or more commands to any number of files. We can save the loop into a file to create a script that we can use over and over. For the sake of time we will do both of these operations at once.</p>

<h3 id="create-a-script-file">Create a script file</h3>

<p>When writing a script it‚Äôs important to use a <strong>plain text editor</strong> instead of a word processor. In the shell, we can use a simple plain text editor called <code class="language-plaintext highlighter-rouge">nano</code>. We want to name our script in a way that says what the script does. The file extension <code class="language-plaintext highlighter-rouge">.sh</code> means this is a shell script:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">nano list-books.sh</code></li>
</ul>

<p>In <code class="language-plaintext highlighter-rouge">nano</code> we see a blank screen and some commands at the bottom. The <code class="language-plaintext highlighter-rouge">^</code> character means ‚Äúcontrol‚Äù. To activate one of these commands:</p>
<ul>
  <li>In Windows, type the <code class="language-plaintext highlighter-rouge">Ctrl</code> key plus the letter</li>
  <li>In Mac, type the <code class="language-plaintext highlighter-rouge">Cmd</code> key plus the letter</li>
</ul>

<h3 id="write-a-script">Write a script</h3>

<p>In any script, it‚Äôs a good idea to include some comments to tell someone else, or your future self, what the script is for and how to use it. To avoid having the shell try to interpret our comments as commands, we need to start each new line with the comment character <code class="language-plaintext highlighter-rouge">#</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # Loop over a set of text files and extract information into a new file:
 # The filename
 # The first line of the file
 # Usage: bash list-books.sh
</code></pre></div></div>

<p>Let‚Äôs save what we‚Äôve done so far. In <code class="language-plaintext highlighter-rouge">nano</code> this is called ‚ÄúWrite Out‚Äù. We can see at the bottom of the screen that the command for ‚ÄúWrite Out‚Äù. or save, is <code class="language-plaintext highlighter-rouge">^O</code>:</p>
<ul>
  <li>Windows: <code class="language-plaintext highlighter-rouge">Ctrl + o</code> followed by <code class="language-plaintext highlighter-rouge">Enter</code></li>
  <li>Mac: <code class="language-plaintext highlighter-rouge">Cmd + o</code> followed by <code class="language-plaintext highlighter-rouge">Enter</code></li>
</ul>

<h3 id="write-a-loop">Write a loop</h3>

<p>Below our comments, we can write the script. This script is one loop. A loop is a way to give the shell a list of things, some instructions to carry out on those things, and a structure for completing those instructions one thing at a time. The basic structure of a loop is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> for thing in list-of-things
 do
      operation-using $thing    # Indentation within the loop is not required, but aids legibility
 done
</code></pre></div></div>

<p>Let‚Äôs use this structure for our own loop:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> for file in *.txt
 do
      echo $file &gt;&gt; book-titles.txt
      head -n 1 $file &gt;&gt; book-titles.txt
 done
</code></pre></div></div>

<p>We can break down our script line by line:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">for file in *.txt</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">file</code> is our variable name. Any name will work but it‚Äôs good practice to use a name that‚Äôs self-explanatory.</li>
      <li><code class="language-plaintext highlighter-rouge">*.txt</code> is our list-of-things. We use the <code class="language-plaintext highlighter-rouge">*</code> wildcard to say ‚ÄúAll files that end in .txt‚Äù</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">do</code>
    <ul>
      <li>Always comes next; tells the shell that the next section are the actions to take.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">echo $file &gt;&gt; book-titles.txt</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">echo</code> is a command that shouts back whatever you give it</li>
      <li><code class="language-plaintext highlighter-rouge">$</code> calls whatever is in the variable. In this case, <code class="language-plaintext highlighter-rouge">$file</code> calls whatever is in the <code class="language-plaintext highlighter-rouge">file</code> variable we created on line 1.</li>
      <li><code class="language-plaintext highlighter-rouge">&gt;&gt; book-titles.txt</code> appends the results of <code class="language-plaintext highlighter-rouge">echo $file</code> into a file called <code class="language-plaintext highlighter-rouge">book-titles.txt</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">head -n 1 $file &gt;&gt; book-titles.txt</code>
    <ul>
      <li>Append the first line of whatever file is currently in the variable to the file <code class="language-plaintext highlighter-rouge">book-titles.txt</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">done</code>
    <ul>
      <li>Tell the shell it‚Äôs done</li>
    </ul>
  </li>
</ol>

<h3 id="save-and-run-the-script">Save and run the script</h3>

<p>We need to save the script we wrote using <code class="language-plaintext highlighter-rouge">nano</code>:</p>
<ul>
  <li>Windows: <code class="language-plaintext highlighter-rouge">Ctrl + o</code> plus <code class="language-plaintext highlighter-rouge">Enter</code></li>
  <li>Mac: <code class="language-plaintext highlighter-rouge">Cmd + o</code>  plus <code class="language-plaintext highlighter-rouge">Enter</code></li>
</ul>

<p>In order to run the script, we need to exit <code class="language-plaintext highlighter-rouge">nano</code>. At the bottom of the screen we can see that <code class="language-plaintext highlighter-rouge">^X</code> means <code class="language-plaintext highlighter-rouge">Exit</code>:</p>
<ul>
  <li>Windows: <code class="language-plaintext highlighter-rouge">Ctrl + x</code></li>
  <li>Mac: <code class="language-plaintext highlighter-rouge">Cmd + x</code></li>
</ul>

<p>Now we can run the script. We need to use the name of the shell we are using as the command to run the script:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">bash list-books.sh</code></li>
</ul>

<p>Now look for the output file, <code class="language-plaintext highlighter-rouge">book-titles.txt</code>, and look inside:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cat book-titles.txt</code></li>
</ul>

<p>Contents will be file name and first line of the file in order by file name.</p>
:ET